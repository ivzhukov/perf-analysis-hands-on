"use strict";(self.webpackChunkperf_analysis=self.webpackChunkperf_analysis||[]).push([[2853],{3627:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>t,metadata:()=>a,toc:()=>l});var i=s(4848),o=s(8453);const t={sidebar_position:1},r="Baseline measurement",a={id:"baseline",title:"Baseline measurement",description:"In this part we are going to build and run a specific benchmark to identify how long it runs without any specific tools (also called as a reference/baseline run). A reference run provides a valuable point of comparison and context for performance analysis, enabling more informed decision-making and effective optimization efforts.",source:"@site/docs/baseline.md",sourceDirName:".",slug:"/baseline",permalink:"/perf-analysis-hands-on/docs/baseline",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Instrumentation",permalink:"/perf-analysis-hands-on/docs/instrumentation"}},c={},l=[{value:"Initial setup",id:"initial-setup",level:2},{value:"Build benchmark",id:"build-benchmark",level:2},{value:"Run benchmark",id:"run-benchmark",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"baseline-measurement",children:"Baseline measurement"}),"\n",(0,i.jsx)(n.p,{children:"In this part we are going to build and run a specific benchmark to identify how long it runs without any specific tools (also called as a reference/baseline run). A reference run provides a valuable point of comparison and context for performance analysis, enabling more informed decision-making and effective optimization efforts."}),"\n",(0,i.jsx)(n.h2,{id:"initial-setup",children:"Initial setup"}),"\n",(0,i.jsx)(n.p,{children:"First of all let's login into CoolMUC-2 using ssh:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ ssh -Y userid@lxlogin1.lrz.de\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"-Y"})," option is necessary to enable X11 forwarding. X11 forwarding is a SSH protocol that enables users to run graphical applications on a remote server and interact with them using their local display and I/O devices."]}),"\n",(0,i.jsx)(n.p,{children:"Now we need to create our own directory for the exercises:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ mkdir -p $HOME/tw45\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"-p"})," prevents error messages if the specified directories already exists."]}),"\n",(0,i.jsx)(n.p,{children:"Then, we need to load required software, e.g. compiler, MPI, text editor:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ module load intel intel-mpi/2019-intel nano\n"})}),"\n",(0,i.jsx)(n.h2,{id:"build-benchmark",children:"Build benchmark"}),"\n",(0,i.jsx)(n.p,{children:"Start by copying the tutorial sources to your working directory:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ cd $HOME/tw45\n$ tar zxvf /lrz/sys/courses/vihps/2024/material/NPB3.3-MZ-MPI.tar.gz -C .\n$ cd $HOME/tw45/NPB3.3-MZ-MPI\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For this tutorial we are going to use the NAS Parallel Benchmark suite (MPI+OpenMP version). It is available ",(0,i.jsx)(n.a,{href:"http://www.nas.nasa.gov/Software/NPB",children:"here"}),", and includes three benchmarks written in Fortran77. You can configure the benchmark for various sizes and classes. This allows the benchmark to be used on a wide range of systems, from workstations to supercomputers."]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.p,{children:"NPB solves discretized versions of the unsteady, compressible Navier-Stokes equations in three spatial dimensions. Each operates on a structured discretization mesh that is a logical cube. In realistic applications, however, a single such mesh is often not sufficient to describe a complex domain, and multiple meshes or zones are used to cover it."}),(0,i.jsx)(n.p,{children:"Multi-zone versions of NPB (NPB-MZ) are designed to exploit multiple levels of parallelism in applications and to test the effectiveness of multi-level and hybrid parallelization paradigms and tools. There are three types of benchmark problems derived from single-zone pseudo applications of NPB:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Block Tri-diagonal (BT)"})," - uneven-sized zones within a problem class, increased number of zones as problem class grows"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scalar Penta-diagonal (SP)"})," - even-sized zones within a problem class, increased number of zones as problem class grows"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lower-Upper Symmetric Gauss-Seidel (LU)"})," - even-sized zones within a problem class, a fixed number of zones for all problem classes"]}),"\n"]}),(0,i.jsx)(n.p,{children:"Benchmark Classes"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Class ",(0,i.jsx)(n.strong,{children:"S"}),": small for quick test purposes"]}),"\n",(0,i.jsxs)(n.li,{children:["Class ",(0,i.jsx)(n.strong,{children:"W"}),": workstation size (a 90's workstation; now likely too small)"]}),"\n",(0,i.jsxs)(n.li,{children:["Classes ",(0,i.jsx)(n.strong,{children:"A"}),", ",(0,i.jsx)(n.strong,{children:"B"}),", ",(0,i.jsx)(n.strong,{children:"C"}),": standard test problems; ~4X size increase going from one class to the next"]}),"\n",(0,i.jsxs)(n.li,{children:["Classes ",(0,i.jsx)(n.strong,{children:"D"}),", ",(0,i.jsx)(n.strong,{children:"E"}),", ",(0,i.jsx)(n.strong,{children:"F"}),": large test problems; ~16X size increase from each of the previous classes"]}),"\n"]}),(0,i.jsxs)(n.p,{children:["MPI is used for communication across zones and OpenMP threads for computation inside zones. More technical details are provided in this ",(0,i.jsx)(n.a,{href:"https://www.nas.nasa.gov/assets/nas/pdf/techreports/2003/nas-03-010.pdf",children:"paper"}),"."]})]}),"\n",(0,i.jsx)(n.p,{children:"Move into the NPB3.3-MZ-MPI root directory and check what is inside:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ ls\nbin/    common/  jobscript/  Makefile  README.install   SP-MZ/\nBT-MZ/  config/  LU-MZ/      README    README.tutorial  sys/\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Subdirectories ",(0,i.jsx)(n.code,{children:"BT-MZ"}),", ",(0,i.jsx)(n.code,{children:"LU-MZ"})," and ",(0,i.jsx)(n.code,{children:"SP-MZ"})," contain source code for each benchmark, ",(0,i.jsx)(n.code,{children:"config"})," and ",(0,i.jsx)(n.code,{children:"common"})," include additional configuration and common code. The provided distribution has already been configured for the hands-on, such that it is ready to be build."]}),"\n",(0,i.jsxs)(n.p,{children:["During this hands-on we will focus on ",(0,i.jsx)(n.code,{children:"BT-MZ"})," exercise. It performs 200 time-steps on a regular 3-dimensional grid. It uses combination of MPI and OpenMP."]}),"\n",(0,i.jsxs)(n.p,{children:["Type ",(0,i.jsx)(n.code,{children:"make"})," for instructions"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'$ make\n    ===========================================\n   =      NAS PARALLEL BENCHMARKS 3.3        =\n   =      MPI+OpenMP Multi-Zone Versions     =\n   =      F77                                =\n   ===========================================\n\n\n   To make a NAS multi-zone benchmark type\n\n         make <benchmark-name> CLASS=<class> NPROCS=<nprocs>\n\n   where <benchmark-name> is "bt-mz", "lu-mz", or "sp-mz"\n         <class>          is "S", "W", "A" through "F"\n         <nprocs>         is number of processes\n\n   To make a set of benchmarks, create the file config/suite.def\n   according to the instructions in config/suite.def.template and type\n\n         make suite\n\n ***************************************************************\n * Custom build configuration is specified in config/make.def  *\n * Suggested tutorial exercise configuration for LiveDVD:      *\n *       make bt-mz CLASS=W NPROCS=4                           *\n ***************************************************************\n'})}),"\n",(0,i.jsx)(n.p,{children:"To build application the following parameters need to be specified:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The benchmark configuration benchmark name (bt-mz, lu-mz, sp-mz): ",(0,i.jsx)(n.code,{children:"bt-mz"})]}),"\n",(0,i.jsxs)(n.li,{children:["The number of MPI processes: ",(0,i.jsx)(n.code,{children:"NPROCS=28"})]}),"\n",(0,i.jsxs)(n.li,{children:["The benchmark class (S, W, A, B, C, D, E): ",(0,i.jsx)(n.code,{children:"CLASS=C"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Alternatively, you can just use ",(0,i.jsx)(n.code,{children:"make suite"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ make bt-mz CLASS=C NPROCS=28\n    ===========================================\n   =      NAS PARALLEL BENCHMARKS 3.3        =\n   =      MPI+OpenMP Multi-Zone Versions     =\n   =      F77                                =\n   ===========================================\n\ncd BT-MZ; make CLASS=C NPROCS=28 VERSION=\nmake[1]: Entering directory '/dss/dsshome1/0C/hpckurs11/tw45/NPB3.3-MZ-MPI/BT-MZ'\nmake[2]: Entering directory '/dss/dsshome1/0C/hpckurs11/tw45/NPB3.3-MZ-MPI/sys'\ncc  -o setparams setparams.c -lm\nmake[2]: Leaving directory '/dss/dsshome1/0C/hpckurs11/tw45/NPB3.3-MZ-MPI/sys'\n../sys/setparams bt-mz 28 C\nmake[2]: Entering directory '/dss/dsshome1/0C/hpckurs11/tw45/NPB3.3-MZ-MPI/BT-MZ'\nmpif77 -c  -O3 -g -qopenmp\t bt.f\nmpif77 -c  -O3 -g -qopenmp\t initialize.f\nmpif77 -c  -O3 -g -qopenmp\t exact_solution.f\nmpif77 -c  -O3 -g -qopenmp\t exact_rhs.f\nmpif77 -c  -O3 -g -qopenmp\t set_constants.f\nmpif77 -c  -O3 -g -qopenmp\t adi.f\nmpif77 -c  -O3 -g -qopenmp\t rhs.f\nmpif77 -c  -O3 -g -qopenmp\t zone_setup.f\nmpif77 -c  -O3 -g -qopenmp\t x_solve.f\nmpif77 -c  -O3 -g -qopenmp\t y_solve.f\nmpif77 -c  -O3 -g -qopenmp\t exch_qbc.f\nmpif77 -c  -O3 -g -qopenmp\t solve_subs.f\nmpif77 -c  -O3 -g -qopenmp\t z_solve.f\nmpif77 -c  -O3 -g -qopenmp\t add.f\nmpif77 -c  -O3 -g -qopenmp\t error.f\nmpif77 -c  -O3 -g -qopenmp\t verify.f\nmpif77 -c  -O3 -g -qopenmp\t mpi_setup.f\ncd ../common; mpif77 -c  -O3 -g -qopenmp\t print_results.f\ncd ../common; mpif77 -c  -O3 -g -qopenmp\t timers.f\nmpif77 -O3 -g -qopenmp\t -o ../bin/bt-mz_C.28 bt.o  initialize.o exact_solution.o exact_rhs.o set_constants.o adi.o  rhs.o zone_setup.o x_solve.o y_solve.o  exch_qbc.o solve_subs.o z_solve.o add.o error.o verify.o mpi_setup.o ../common/print_results.o ../common/timers.o\nmake[2]: Leaving directory '/dss/dsshome1/0C/hpckurs11/tw45/NPB3.3-MZ-MPI/BT-MZ'\nBuilt executable ../bin/bt-mz_C.28\nmake[1]: Leaving directory '/dss/dsshome1/0C/hpckurs11/tw45/NPB3.3-MZ-MPI/BT-MZ'\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If compilation succeeds, you can find in the ",(0,i.jsx)(n.code,{children:"bin"})," directory."]}),"\n",(0,i.jsx)(n.h2,{id:"run-benchmark",children:"Run benchmark"}),"\n",(0,i.jsxs)(n.p,{children:["Lets go to the ",(0,i.jsx)(n.code,{children:"bin"})," directory, copy a prepared batch script and examine what it does:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ cd bin\n$ cp ../jobscript/coolmuc2/reference.sbatch .\n$ nano reference.sbatch\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here is what you should see in your batch script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"#!/bin/bash\n#SBATCH -o bt-mz.%j.out\n#SBATCH -e bt-mz.%j.err\n#SBATCH -J bt-mz\n#SBATCH --clusters=cm2_tiny\n#SBATCH --partition=cm2_tiny\n#SBATCH --reservation=hhps1s24\n#SBATCH --nodes=2\n#SBATCH --ntasks=28\n#SBATCH --ntasks-per-node=14\n#SBATCH --get-user-env\n#SBATCH --time=00:05:00\n\nexport OMP_NUM_THREADS=4\n\n# Benchmark configuration (disable load balancing with threads)\nexport NPB_MZ_BLOAD=0\nPROCS=28\nCLASS=C\n\n# Run the application\nmpiexec -n $SLURM_NTASKS ./bt-mz_$CLASS.$PROCS\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To exit text editor you can use ",(0,i.jsx)(n.code,{children:"Ctrl+X"})]}),"\n",(0,i.jsx)(n.p,{children:"On CoolMUC-2 we are going to use:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"2 standard compute nodes with 2x Intel Haswell 14-Core Processor each (28 cores / 56 threads)"}),"\n",(0,i.jsx)(n.li,{children:"56GB RAM per node"}),"\n",(0,i.jsx)(n.li,{children:"14 MPI ranks per node and 4 OpenMP threads per MPI rank"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Now we are ready to submit our batch script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ sbatch reference.sbatch\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["To submit the job use ",(0,i.jsx)(n.code,{children:"sbatch <script you want to submit>"}),"."]}),(0,i.jsxs)(n.p,{children:["To check status of all your jobs use ",(0,i.jsx)(n.code,{children:"squeue -M cm2_tiny --me"}),"."]}),(0,i.jsxs)(n.p,{children:["To cancel specific job use ",(0,i.jsx)(n.code,{children:"scancel -M cm2_tiny <jobid you want to cancel>"}),"."]})]}),"\n",(0,i.jsxs)(n.p,{children:["Once the job has finished you will see two files in your directory, one with standard output ",(0,i.jsx)(n.code,{children:"bt-mz.<jobid>.out"})," and one with standard error output ",(0,i.jsx)(n.code,{children:"bt-mz.<jobid>.err"}),". The former one should include all output provided by your application and the latter one only system specific output. Let's examine standard output file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ cat bt-mz.<jobid>.out\nNAS Parallel Benchmarks (NPB3.3-MZ-MPI) - BT-MZ MPI+OpenMP Benchmark\n\nNumber of zones:  16 x  16\nIterations: 200    dt:   0.000100\nNumber of active processes:    28\n\nUse the default load factors with threads\nTotal number of threads:    112  (  4.0 threads/process)\n\nCalculated speedup =    110.34\n\nTime step    1\nTime step   20\nTime step   40\nTime step   60\nTime step   80\nTime step  100\nTime step  120\nTime step  140\nTime step  160\nTime step  180\nTime step  200\nVerification being performed for class C\naccuracy setting for epsilon =  0.1000000000000E-07\nComparison of RMS-norms of residual\n          1 0.3457703287806E+07 0.3457703287806E+07 0.1092202750127E-12\n          2 0.3213621375929E+06 0.3213621375929E+06 0.1320422658492E-12\n          3 0.7002579656870E+06 0.7002579656870E+06 0.1496217033982E-13\n          4 0.4517459627471E+06 0.4517459627471E+06 0.2280652586031E-13\n          5 0.2818715870791E+07 0.2818715870791E+07 0.1486830094937E-14\nComparison of RMS-norms of solution error\n          1 0.2059106993570E+06 0.2059106993570E+06 0.1540627820550E-12\n          2 0.1680761129461E+05 0.1680761129461E+05 0.2132015705369E-12\n          3 0.4080731640795E+05 0.4080731640795E+05 0.3084595553087E-13\n          4 0.2836541076778E+05 0.2836541076778E+05 0.1026032398931E-12\n          5 0.2136807610771E+06 0.2136807610771E+06 0.2335870996607E-12\nVerification Successful\n\n\nBT-MZ Benchmark Completed.\nClass           =                        C\nSize            =            480x  320x 28\nIterations      =                      200\nTime in seconds =                    13.91\nTotal processes =                       28\nTotal threads   =                      112\nMop/s total     =                174439.35\nMop/s/thread    =                  1557.49\nOperation type  =           floating point\nVerification    =               SUCCESSFUL\nVersion         =                    3.3.1\nCompile date    =              04 Jun 2024\n"})}),"\n",(0,i.jsx)(n.p,{children:'The most important metric in the output is "Time in seconds" which indicates how much time the application spent executing 200 iterations (pre and post. processing are excluded from the time measurement). Further, "Validation" is important as it indicates if the computation completed successfully (e.g. converged). Please write down the time value you received, as we are going to refer to its value in the next section.'}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["For time measurements you can use ",(0,i.jsx)(n.code,{children:"time"})," utility which is used to measure the execution time of a program or command. It provides information about how long a particular process took to execute, including user time, system time, and real time, i.e."]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User time"})," is the time spent executing user-space instructions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"System time"})," is the time spent executing system calls."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Real time"})," is the actual time elapsed from start to finish, including all waiting and execution time."]}),"\n"]}),(0,i.jsx)(n.p,{children:"It's a handy tool for performance analysis and optimization."})]}),"\n",(0,i.jsx)(n.admonition,{title:"Question",type:"tip",children:(0,i.jsx)(n.p,{children:"In this exercise we measured the basic performance metric, i.e. walltime. What else do you think can be used to measure the performance of the application in general and of the code you are working on?"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var i=s(6540);const o={},t=i.createContext(o);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);